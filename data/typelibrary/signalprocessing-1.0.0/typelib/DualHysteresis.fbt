<?xml version="1.0" encoding="UTF-8"?>
<FBType Name="DualHysteresis" Comment="2-way conversion of Analog to Digital with Hysteresis">
	<Identification Standard="61499-2" Description="Copyright (c) 2023 HR Agrartechnik GmbH   &#10; &#10;This program and the accompanying materials are made  &#10;available under the terms of the Eclipse Public License 2.0  &#10;which is available at https://www.eclipse.org/legal/epl-2.0/  &#10; &#10;SPDX-License-Identifier: EPL-2.0" >
	</Identification>
	<VersionInfo Organization="HR Agrartechnik GmbH" Version="1.0" Author="Franz HÃ¶pfinger" Date="2023-06-06">
	</VersionInfo>
	<CompilerInfo packageName="signalprocessing">
	</CompilerInfo>
	<InterfaceList>
		<EventInputs>
			<Event Name="INIT" Type="Event" Comment="Initialization Request">
				<With Var="QI"/>
			</Event>
			<Event Name="REQ" Type="Event" Comment="Normal Execution Request">
				<With Var="QI"/>
				<With Var="MI"/>
				<With Var="DEAD"/>
				<With Var="INPUT"/>
				<With Var="HYSTERESIS"/>
			</Event>
		</EventInputs>
		<EventOutputs>
			<Event Name="INITO" Type="Event" Comment="Initialization Confirm">
				<With Var="QO"/>
			</Event>
			<Event Name="CNF" Type="Event" Comment="Execution Confirmation">
				<With Var="DO_UP"/>
				<With Var="DO_DOWN"/>
			</Event>
		</EventOutputs>
		<InputVars>
			<VarDeclaration Name="QI" Type="BOOL" Comment="Input event qualifier"/>
			<VarDeclaration Name="MI" Type="REAL" Comment="MID Setting can e.g. be 0.5 meaning 50%" InitialValue="0.5"/>
			<VarDeclaration Name="DEAD" Type="REAL" Comment="Deadband around MID can be e.g. 0.1 meaning 10%" InitialValue="0.1"/>
			<VarDeclaration Name="HYSTERESIS" Type="REAL" Comment="Hysteresis can be 0.1 meaning 10%" InitialValue="0.1"/>
			<VarDeclaration Name="INPUT" Type="REAL" Comment="Value"/>
		</InputVars>
		<OutputVars>
			<VarDeclaration Name="QO" Type="BOOL" Comment=""/>
			<VarDeclaration Name="DO_UP" Type="BOOL" Comment=" UP"/>
			<VarDeclaration Name="DO_DOWN" Type="BOOL" Comment="DOWN"/>
		</OutputVars>
	</InterfaceList>
	<BasicFB>
		<ECC>
			<ECState Name="START" Comment="Initial State" x="840.0" y="2460.0">
			</ECState>
			<ECState Name="Init" Comment="Initialization" x="1600.0" y="2000.0">
				<ECAction Algorithm="initialize" Output="INITO"/>
			</ECState>
			<ECState Name="UP" Comment="Normal execution" x="6666.666666666667" y="1066.6666666666667">
				<ECAction Algorithm="alUp" Output="CNF"/>
			</ECState>
			<ECState Name="Neutral" Comment="" x="2266.666666666667" y="2480.0">
				<ECAction Algorithm="alNeutral" Output="CNF"/>
			</ECState>
			<ECState Name="DeInit" Comment="" x="1506.6666666666667" y="2860.0">
				<ECAction Algorithm="deInitialize" Output="INITO"/>
			</ECState>
			<ECState Name="DOWN" Comment="" x="6666.666666666667" y="3466.666666666667">
				<ECAction Algorithm="alDown" Output="CNF"/>
			</ECState>
			<ECTransition Source="START" Destination="Init" Condition="INIT[TRUE = QI]" Comment="" x="1206.6666666666667" y="2260.0"/>
			<ECTransition Source="Init" Destination="Neutral" Condition="REQ" Comment="" x="2026.6666666666667" y="2313.3333333333335"/>
			<ECTransition Source="Neutral" Destination="DeInit" Condition="INIT[FALSE = QI]" Comment="" x="2053.3333333333335" y="2680.0"/>
			<ECTransition Source="Neutral" Destination="UP" Condition="REQ[INPUT &gt;= MI + DEAD + HYSTERESIS]" Comment="" x="5040.0" y="1173.3333333333335"/>
			<ECTransition Source="DeInit" Destination="START" Condition="1" Comment="" x="1306.6666666666667" y="2780.0"/>
			<ECTransition Source="Neutral" Destination="DOWN" Condition="REQ[INPUT &lt;= MI - DEAD - HYSTERESIS]" Comment="" x="5513.333333333334" y="3013.3333333333335"/>
			<ECTransition Source="DOWN" Destination="Neutral" Condition="REQ[INPUT &gt; MI - DEAD]" Comment="" x="5173.333333333334" y="3480.0"/>
			<ECTransition Source="UP" Destination="Neutral" Condition="REQ[INPUT &lt; MI + DEAD]" Comment="" x="5173.333333333334" y="2026.6666666666667"/>
		</ECC>
		<Algorithm Name="initialize" Comment="">
			<ST><![CDATA[ALGORITHM initialize

QO := QI;
(* in any case go safe State *)
DO_UP := BOOL#FALSE;
DO_DOWN := BOOL#FALSE;
END_ALGORITHM]]></ST>
		</Algorithm>
		<Algorithm Name="deInitialize" Comment="">
			<ST><![CDATA[

ALGORITHM deInitialize

QO := BOOL#FALSE;
(* in any case go safe State *)
DO_UP := BOOL#FALSE;
DO_DOWN := BOOL#FALSE;
END_ALGORITHM]]></ST>
		</Algorithm>
		<Algorithm Name="alNeutral" Comment="">
			<ST><![CDATA[

ALGORITHM alNeutral
QO := QI;
(* in any case go safe State *)
DO_UP := BOOL#FALSE;
DO_DOWN := BOOL#FALSE;
END_ALGORITHM]]></ST>
		</Algorithm>
		<Algorithm Name="alUp" Comment="">
			<ST><![CDATA[

ALGORITHM alUp
QO := QI;
IF TRUE = QI THEN
	(* only perform normal operation of QI is true *)
	DO_UP := BOOL#TRUE;
	DO_DOWN := BOOL#FALSE;
END_IF;
END_ALGORITHM]]></ST>
		</Algorithm>
		<Algorithm Name="alDown" Comment="">
			<ST><![CDATA[

ALGORITHM alDown
QO := QI;
IF TRUE = QI THEN
	(* only perform normal operation of QI is true *)
	DO_UP := BOOL#FALSE;
	DO_DOWN := BOOL#TRUE;
END_IF;
END_ALGORITHM

]]></ST>
		</Algorithm>
	</BasicFB>
</FBType>

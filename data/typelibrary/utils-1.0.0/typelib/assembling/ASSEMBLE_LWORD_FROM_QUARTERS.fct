<?xml version="1.0" encoding="UTF-8"?>
<Function Name="ASSEMBLE_LWORD_FROM_QUARTERS" Comment="this Function combines the 31 QUARTER BYTES to a LWORD">
	<Identification Standard="61499-1" Description="Copyright (c) 2024 HR Agrartechnik GmbH    &#10;    &#10;This program and the accompanying materials are made     &#10;available under the terms of the Eclipse Public License 2.0     &#10;which is available at https://www.eclipse.org/legal/epl-2.0/     &#10;     &#10;SPDX-License-Identifier: EPL-2.0" >
	</Identification>
	<VersionInfo Organization="HR Agrartechnik" Version="1.0" Author="Franz HÃ¶pfinger" Date="2024-02-22" Remarks="initial Implementation">
	</VersionInfo>
	<VersionInfo Organization="HR Agrartechnik" Version="1.1" Author="Moritz Ortmeier" Date="2024-07-28" Remarks="rename Function">
	</VersionInfo>
	<CompilerInfo>
	</CompilerInfo>
	<InterfaceList>
		<EventInputs>
			<Event Name="REQ" Type="Event" Comment="">
				<With Var="QUARTER_BYTE_00"/>
				<With Var="QUARTER_BYTE_01"/>
				<With Var="QUARTER_BYTE_02"/>
				<With Var="QUARTER_BYTE_03"/>
				<With Var="QUARTER_BYTE_04"/>
				<With Var="QUARTER_BYTE_05"/>
				<With Var="QUARTER_BYTE_06"/>
				<With Var="QUARTER_BYTE_07"/>
				<With Var="QUARTER_BYTE_08"/>
				<With Var="QUARTER_BYTE_09"/>
				<With Var="QUARTER_BYTE_10"/>
				<With Var="QUARTER_BYTE_11"/>
				<With Var="QUARTER_BYTE_12"/>
				<With Var="QUARTER_BYTE_13"/>
				<With Var="QUARTER_BYTE_14"/>
				<With Var="QUARTER_BYTE_15"/>
				<With Var="QUARTER_BYTE_16"/>
				<With Var="QUARTER_BYTE_17"/>
				<With Var="QUARTER_BYTE_18"/>
				<With Var="QUARTER_BYTE_19"/>
				<With Var="QUARTER_BYTE_20"/>
				<With Var="QUARTER_BYTE_21"/>
				<With Var="QUARTER_BYTE_22"/>
				<With Var="QUARTER_BYTE_23"/>
				<With Var="QUARTER_BYTE_24"/>
				<With Var="QUARTER_BYTE_25"/>
				<With Var="QUARTER_BYTE_26"/>
				<With Var="QUARTER_BYTE_27"/>
				<With Var="QUARTER_BYTE_28"/>
				<With Var="QUARTER_BYTE_29"/>
				<With Var="QUARTER_BYTE_30"/>
				<With Var="QUARTER_BYTE_31"/>
			</Event>
		</EventInputs>
		<EventOutputs>
			<Event Name="CNF" Type="Event" Comment="">
				<With Var=""/>
			</Event>
		</EventOutputs>
		<InputVars>
			<VarDeclaration Name="QUARTER_BYTE_00" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_01" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_02" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_03" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_04" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_05" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_06" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_07" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_08" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_09" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_10" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_11" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_12" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_13" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_14" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_15" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_16" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_17" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_18" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_19" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_20" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_21" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_22" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_23" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_24" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_25" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_26" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_27" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_28" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_29" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_30" Type="BYTE" Comment=""/>
			<VarDeclaration Name="QUARTER_BYTE_31" Type="BYTE" Comment=""/>
		</InputVars>
		<OutputVars>
			<VarDeclaration Name="" Type="LWORD" Comment=""/>
		</OutputVars>
	</InterfaceList>
	<FunctionBody>
		<ST><![CDATA[(* this Function combines the 31 QUARTER BYTES to a LWORD *)
FUNCTION ASSEMBLE_LWORD_FROM_QUARTERS : LWORD

VAR_INPUT
	QUARTER_BYTE_00 : BYTE;
	QUARTER_BYTE_01 : BYTE;
	QUARTER_BYTE_02 : BYTE;
	QUARTER_BYTE_03 : BYTE;
	QUARTER_BYTE_04 : BYTE;
	QUARTER_BYTE_05 : BYTE;
	QUARTER_BYTE_06 : BYTE;
	QUARTER_BYTE_07 : BYTE;
	QUARTER_BYTE_08 : BYTE;
	QUARTER_BYTE_09 : BYTE;
	QUARTER_BYTE_10 : BYTE;
	QUARTER_BYTE_11 : BYTE;
	QUARTER_BYTE_12 : BYTE;
	QUARTER_BYTE_13 : BYTE;
	QUARTER_BYTE_14 : BYTE;
	QUARTER_BYTE_15 : BYTE;
	QUARTER_BYTE_16 : BYTE;
	QUARTER_BYTE_17 : BYTE;
	QUARTER_BYTE_18 : BYTE;
	QUARTER_BYTE_19 : BYTE;
	QUARTER_BYTE_20 : BYTE;
	QUARTER_BYTE_21 : BYTE;
	QUARTER_BYTE_22 : BYTE;
	QUARTER_BYTE_23 : BYTE;
	QUARTER_BYTE_24 : BYTE;
	QUARTER_BYTE_25 : BYTE;
	QUARTER_BYTE_26 : BYTE;
	QUARTER_BYTE_27 : BYTE;
	QUARTER_BYTE_28 : BYTE;
	QUARTER_BYTE_29 : BYTE;
	QUARTER_BYTE_30 : BYTE;
	QUARTER_BYTE_31 : BYTE;
END_VAR

ASSEMBLE_LWORD_FROM_QUARTERS := LWORD_QUARTER_ZZ;
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_31), SHIFT_QUARTER_31);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_30), SHIFT_QUARTER_30);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_29), SHIFT_QUARTER_29);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_28), SHIFT_QUARTER_28);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_27), SHIFT_QUARTER_27);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_26), SHIFT_QUARTER_26);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_25), SHIFT_QUARTER_25);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_24), SHIFT_QUARTER_24);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_23), SHIFT_QUARTER_23);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_22), SHIFT_QUARTER_22);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_21), SHIFT_QUARTER_21);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_20), SHIFT_QUARTER_20);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_19), SHIFT_QUARTER_19);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_18), SHIFT_QUARTER_18);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_17), SHIFT_QUARTER_17);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_16), SHIFT_QUARTER_16);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_15), SHIFT_QUARTER_15);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_14), SHIFT_QUARTER_14);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_13), SHIFT_QUARTER_13);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_12), SHIFT_QUARTER_12);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_11), SHIFT_QUARTER_11);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_10), SHIFT_QUARTER_10);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_09), SHIFT_QUARTER_09);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_08), SHIFT_QUARTER_08);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_07), SHIFT_QUARTER_07);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_06), SHIFT_QUARTER_06);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_05), SHIFT_QUARTER_05);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_04), SHIFT_QUARTER_04);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_03), SHIFT_QUARTER_03);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_02), SHIFT_QUARTER_02);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_01), SHIFT_QUARTER_01);
ASSEMBLE_LWORD_FROM_QUARTERS := ASSEMBLE_LWORD_FROM_QUARTERS OR SHL(BYTE_TO_LWORD(QUARTER_BYTE_00), SHIFT_QUARTER_00);

END_FUNCTION
]]></ST>
	</FunctionBody>
</Function>
